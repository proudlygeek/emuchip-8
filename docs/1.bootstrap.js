(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[1],{

/***/ "./emuchip_8.js":
/*!**********************!*\
  !*** ./emuchip_8.js ***!
  \**********************/
/*! exports provided: __wbg_random_fabf73e8a709437c, Emulator, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_random_fabf73e8a709437c\", function() { return __wbg_random_fabf73e8a709437c; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Emulator\", function() { return Emulator; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emuchip_8_bg */ \"./emuchip_8_bg.wasm\");\n/* tslint:disable */\n\n\nfunction __wbg_random_fabf73e8a709437c() {\n    return Math.random();\n}\n\nfunction freeEmulator(ptr) {\n\n    _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_emulator_free\"](ptr);\n}\n/**\n*/\nclass Emulator {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Emulator.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeEmulator(ptr);\n    }\n\n    /**\n    * @returns {Emulator}\n    */\n    static new() {\n        return Emulator.__wrap(_emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_new\"]());\n    }\n    /**\n    * @returns {void}\n    */\n    load_fontset() {\n        return _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_load_fontset\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_memory() {\n        return _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_get_memory\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_gfx() {\n        return _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_get_gfx\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_keys() {\n        return _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_get_keys\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_tick\"](this.ptr);\n    }\n    /**\n    * @returns {boolean}\n    */\n    draw_flag() {\n        return (_emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"emulator_draw_flag\"](this.ptr)) !== 0;\n    }\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? __webpack_require__(/*! util */ \"./node_modules/util/util.js\").TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n\n\n//# sourceURL=webpack:///./emuchip_8.js?");

/***/ }),

/***/ "./emuchip_8_bg.wasm":
/*!***************************!*\
  !*** ./emuchip_8_bg.wasm ***!
  \***************************/
/*! exports provided: memory, __rustc_debug_gdb_scripts_section__, __wbg_emulator_free, emulator_new, emulator_load_fontset, emulator_get_memory, emulator_get_gfx, emulator_get_keys, emulator_tick, emulator_draw_flag */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./emuchip_8 */ \"./emuchip_8.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///./emuchip_8_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./emuchip_8_bg */ \"./emuchip_8_bg.wasm\");\n/* harmony import */ var _emuchip_8__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./emuchip_8 */ \"./emuchip_8.js\");\n\n\n\nconst HEIGHT = 32;\nconst WIDTH = 64;\nconst loadGame = document.querySelector('#load-game');\nconst canvas = document.querySelector('#screen');\nconst ctx = canvas.getContext('2d');\nconst keyboardMapping = {\n  '1': 0x1,\n  '2': 0x2,\n  '3': 0x3,\n  '4': 0xc,\n  q: 0x4,\n  w: 0x5,\n  e: 0x6,\n  r: 0xd,\n  a: 0x7,\n  s: 0x8,\n  d: 0x9,\n  f: 0xe,\n  z: 0xa,\n  x: 0x0,\n  c: 0xb,\n  v: 0xf\n};\n\nconst emu = _emuchip_8__WEBPACK_IMPORTED_MODULE_1__[\"Emulator\"].new();\n\nconst sharedMemoryBuffer = new Uint8Array(\n  _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n  emu.get_memory(),\n  4096\n);\n\nconst sharedDisplayBuffer = new Uint8Array(\n  _emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer,\n  emu.get_gfx(),\n  WIDTH * HEIGHT\n);\n\nconst sharedKeysBuffer = new Uint8Array(_emuchip_8_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer, emu.get_keys(), 16);\n\nconst initVM = () => {\n  canvas.height = HEIGHT * 10;\n  canvas.width = WIDTH * 10;\n  ctx.fillStyle = 'rgb(0, 0, 0)';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  emu.load_fontset();\n};\n\nconst fetchGame = async game =>\n  fetch(`roms/${game.toUpperCase()}`)\n    .then(res => res.arrayBuffer())\n    .then(buffer => {\n      const rom = new DataView(buffer, 0, buffer.byteLength);\n\n      for (let i = 0; i < buffer.byteLength; i++) {\n        sharedMemoryBuffer[0x200 + i] = rom.getUint8(i);\n      }\n    });\n\nconst handleKeyDown = keyboard => {\n  if (keyboard.key in keyboardMapping) {\n    sharedKeysBuffer[keyboardMapping[keyboard.key]] = true;\n  }\n};\n\nconst handleKeyUp = keyboard => {\n  if (keyboard.key in keyboardMapping) {\n    sharedKeysBuffer[keyboardMapping[keyboard.key]] = false;\n  }\n};\n\nconst drawGraphic = () => {\n  for (let i = 0; i < WIDTH * HEIGHT; i++) {\n    const pixel = sharedDisplayBuffer[i];\n\n    const x = (i % 64) * 10;\n    const y = Math.floor(i / 64) * 10;\n\n    ctx.fillStyle = 'rgb(0,0,0)';\n\n    if (pixel === 1) {\n      ctx.fillStyle = 'rgb(255,255,255)';\n    }\n\n    ctx.fillRect(x, y, 10, 10);\n  }\n};\n\nconst runningLoop = () => {\n  emu.tick();\n\n  if (emu.draw_flag) {\n    drawGraphic();\n  }\n\n  requestAnimationFrame(runningLoop);\n};\n\nloadGame.addEventListener('change', async e => {\n  await fetchGame(e.target.value);\n  document.addEventListener('keydown', e => handleKeyDown(e));\n  document.addEventListener('keyup', e => handleKeyUp(e));\n  runningLoop();\n});\n\ninitVM();\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);